Requirements for certbot ssl management script

The goal of the script is to update nginx configs to use certbot managed ssl certs
The nginx configs that need to be updated are in the pwd, or if there aren't any in pwd,
look in the same directory as the script
The script should not attempt to update configs that are not in these two locations
All configs that the script attempts to update are assumed to have been previously
included by nginx
The script should have detailed colored output to make understanding all the steps
of the process easy

1. Find Configs:
 - Test full Nginx config to ensure we start from good state
 - Locate all .conf files in the current directory
    - If there are none, look in the same directory as the script
 - Exclude any files starting with _
2. Process Each Config:
 - For each config file, process each server block separately:
  - HTTPS (443) Server Blocks:
    - Check if there is a cert for the domain managed by Certbot
    - If there is a cert for the domain managed by Certbot:
      - Check if the server block is using it
      - If not, update the server block to use it
    - If there is not a cert for the domain managed by Certbot:
      - Force renew to get it under Certbot management
      - Update cert paths if needed
  - HTTP (80) Server Blocks:
    - Issue new cert via Certbot
    - Convert server block to HTTPS (443)
    - Add SSL cert configuration to the server block
3. Finalize:
 - Set up auto-renewal for any newly issued certificate
 - Test full Nginx config
 - Reload Nginx
4. Key Points to Confirm:
 - All operations are idempotent (safe to run multiple times)
 - NO BACKUP FILES, configs are kept in git, so can always be reverted
 - Updating configs in place is preferable, but if the file is fully replaced, ensure the permissions are not changed
 - Do not modify the server blocks beyond updating the listen and ssl_cert directives
 - Do not add 80->443 redirect, there is already a blanket one for all domains
 - Server blocks have both IPv4 and IPv6 listen directives
 - End result should be a valid nginx config with the same number of server blocks with the only potential changes
   happening to listen and ssl_cert directives in each server block

 - Example of a multi-block config:

```
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name mirabile.kortexa.ai;
    ssl_certificate /etc/nginx/ssl/mirabile.kortexa.ai_2048/fullchain.cer;
    ssl_certificate_key /etc/nginx/ssl/mirabile.kortexa.ai_2048/private.key;
    root /home/francip/src/mirabile/dist;
    index index.html;
    location / {
        try_files $uri $uri/ /index.html;
    }
}
server {
    listen 80;
    listen [::]:80;
    server_name mrbl.kortexa.ai;
    location / {
        return 302 https://mirabile.kortexa.ai$request_uri;
    }
}
```

The result of the script processing this example should be the first block updated to use the certbot
managed cert and the second block converted to HTTPS and a certbot managed cert added

----
Implementation requirements:

1. Make simple code that is easy to understand and maintain
2. Do not use awk or sed. Use simple matching on directive and domain names
3. Avoid regex matching
4. Componentize the code into small functions
5. The script will run on Ubuntu 24, but development happens on Mac OS
6. Do not attempt to make the script universal, or cross platform, or too defensive
   All the scripts expected to be processed are very close to the example, with few small exceptions
   Where couple of scripts have many locations in the server block
