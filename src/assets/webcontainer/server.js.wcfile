// WebContainer version of the server
// This is a simplified version adapted from the TypeScript server
// It will be overridden by the dynamic Vite plugin if server/src/server.ts exists

import express from 'express';
import expressWs from 'express-ws';
import cors from 'cors';

const app = express();
const nodeEnv = process.env.NODE_ENV || 'development';

// Set up CORS
app.use(cors({ 
  origin: '*',
  methods: ['GET', 'POST', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));
app.use(express.json());

// ---- Health Routes ----
app.get('/', (_req, res) => {
  res.send('Worker17 MCP Server is running in WebContainer');
});

app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    time: new Date().toISOString(),
    environment: 'webcontainer'
  });
});

// ---- WebSocket Setup ----
const wsApp = expressWs(app);

// Store active connections by worker ID
const workerConnections = new Map();

// Helper functions for worker management
const addWorkerConnection = (workerId, ws) => {
  workerConnections.set(workerId, ws);
  console.log(`Worker registered: ${workerId}`);
};

const terminateWorker = (workerId) => {
  const ws = workerConnections.get(workerId);
  if (!ws || ws.readyState !== 1) { // WebSocket.OPEN is 1
    console.log(`Cannot terminate worker ${workerId}: not connected`);
    return false;
  }
  
  // Send terminate command
  ws.send(JSON.stringify({
    type: 'command',
    workerId,
    payload: {
      command: 'terminate'
    },
    timestamp: Date.now()
  }));
  
  console.log(`Terminate command sent to worker: ${workerId}`);
  return true;
};

const getAllWorkerIds = () => {
  return Array.from(workerConnections.keys());
};

const getWorkerState = (workerId) => {
  return new Promise((resolve) => {
    const ws = workerConnections.get(workerId);
    if (!ws || ws.readyState !== 1) { // WebSocket.OPEN is 1
      console.log(`Cannot get status for worker ${workerId}: not connected`);
      // Return a basic offline state
      resolve({
        id: workerId,
        active: false,
        status: 'offline',
        timestamp: Date.now()
      });
      return;
    }
    
    // Generate a unique request ID
    const requestId = `status-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;
    
    // Create a one-time message handler for this specific request
    const handleResponse = (event) => {
      try {
        const data = JSON.parse(event.data.toString());
        if (data.type === 'statusResponse' && data.requestId === requestId) {
          // We got our response, remove the listener
          ws.removeEventListener('message', handleResponse);
          
          // Resolve with the received state
          resolve(data.payload);
        }
      } catch (error) {
        console.error('Error parsing status response:', error);
      }
    };
    
    // Add temporary listener for this specific response
    ws.addEventListener('message', handleResponse);
    
    // Set a timeout to clean up and return default offline state if no response
    setTimeout(() => {
      ws.removeEventListener('message', handleResponse);
      console.log(`Status request for worker ${workerId} timed out`);
      resolve({
        id: workerId,
        active: false,
        status: 'offline',
        timestamp: Date.now()
      });
    }, 5000);
    
    // Send the status request
    ws.send(JSON.stringify({
      type: 'statusRequest',
      workerId,
      requestId,
      payload: {},
      timestamp: Date.now()
    }));
    
    console.log(`Status requested for worker: ${workerId}`);
  });
};

// WebSocket endpoint
app.ws('/ws', (ws, req) => {
  console.log('WebSocket client connected');
  
  // Keep track of which worker this is
  let workerId = null;
  
  // Send welcome message
  ws.send(JSON.stringify({
    type: 'info',
    message: 'Connected to Worker17 WebContainer server',
    timestamp: Date.now()
  }));
  
  // Handle incoming messages
  ws.on('message', async (msg) => {
    try {
      const data = JSON.parse(msg.toString());
      console.log(`Received WebSocket message: ${data.type}`);
      
      // Handle different message types
      switch (data.type) {
        case 'connect':
          // Client identifying itself as a worker
          workerId = data.workerId;
          if (workerId) {
            addWorkerConnection(workerId, ws);
            console.log(`Worker connected and registered: ${workerId}`);
          }
          break;
          
        case 'statusRequest':
          // Client or MCP server requesting worker status
          const requestedWorkerId = data.payload?.targetWorkerId || data.workerId;
          console.log(`Status requested for worker: ${requestedWorkerId}`);
          
          // Get the worker connection
          const targetWorkerWs = workerConnections.get(requestedWorkerId);
          
          if (targetWorkerWs && targetWorkerWs.readyState === 1) { // WebSocket.OPEN is 1
            // Forward the status request to the worker
            targetWorkerWs.send(JSON.stringify({
              type: 'statusRequest',
              workerId: requestedWorkerId,
              requestId: data.requestId,
              timestamp: Date.now()
            }));
            
            // Wait for response via one-time listener
            const responsePromise = new Promise((resolve) => {
              const responseHandler = (responseMsg) => {
                try {
                  const responseData = JSON.parse(responseMsg.data.toString());
                  
                  // Check if this is the response we're waiting for
                  if (responseData.type === 'statusResponse' && 
                      responseData.requestId === data.requestId) {
                      
                    // Forward the response back to the original requester
                    ws.send(responseMsg.data.toString());
                    resolve();
                  }
                } catch (error) {
                  console.error('Error processing response:', error);
                }
              };
              
              // Set up the listener
              targetWorkerWs.addEventListener('message', responseHandler, { once: true });
              
              // Set a timeout to clean up and send fallback
              setTimeout(() => {
                // Remove the listener to avoid memory leaks
                targetWorkerWs.removeEventListener('message', responseHandler);
                
                console.log(`Status request for worker ${requestedWorkerId} timed out`);
                ws.send(JSON.stringify({
                  type: 'statusResponse',
                  requestId: data.requestId,
                  workerId: requestedWorkerId,
                  payload: { 
                    id: requestedWorkerId, 
                    active: false, 
                    status: 'offline',
                    timestamp: Date.now()
                  },
                  timestamp: Date.now()
                }));
                resolve();
              }, 5000);
            });
            
            // Wait for the response to be handled
            await responsePromise;
          } else {
            // Worker is not connected, send offline status
            ws.send(JSON.stringify({
              type: 'statusResponse',
              requestId: data.requestId,
              workerId: requestedWorkerId,
              payload: { 
                id: requestedWorkerId, 
                active: false, 
                status: 'offline',
                timestamp: Date.now()
              },
              timestamp: Date.now()
            }));
          }
          break;
        
        case 'statusResponse':
          // Pass through status response
          console.log(`Received status response for worker: ${data.workerId}`);
          break;
          
        case 'command':
          // Handle commands for the worker
          console.log(`Command received: ${data.payload.command}`);
          break;
          
        case 'cameraImageRequest':
          // Handle camera image requests
          const targetWorkerId = data.workerId;
          console.log(`Camera image requested for worker: ${targetWorkerId}`);
          
          // Send a dummy response (in real implementation this would capture an image)
          ws.send(JSON.stringify({
            type: 'cameraImageResponse',
            requestId: data.requestId,
            workerId: targetWorkerId,
            payload: { 
              message: 'Camera image not available in WebContainer mode',
              timestamp: Date.now()
            },
            timestamp: Date.now()
          }));
          break;
      }
      
      // Always acknowledge receipt
      ws.send(JSON.stringify({ type: 'ack' }));
    } catch (error) {
      console.error('Error processing WebSocket message:', error);
      ws.send(JSON.stringify({ 
        type: 'error', 
        message: 'Failed to process message' 
      }));
    }
  });
  
  // Handle disconnection
  ws.on('close', () => {
    if (workerId) {
      // Remove from active connections
      workerConnections.delete(workerId);
      console.log(`Worker disconnected: ${workerId}`);
    }
  });
});

// ---- SSE Routes for MCP ----
app.get('/sse', (req, res) => {
  res.setHeader('Content-Type', 'text/event-stream');
  res.setHeader('Cache-Control', 'no-cache');
  res.setHeader('Connection', 'keep-alive');
  
  // Send a simple event to show the connection is working
  res.write('event: mcp-handshake\n');
  res.write('data: {"status":"connected"}\n\n');
  
  // Keep the connection alive with a ping every 30 seconds
  const pingInterval = setInterval(() => {
    res.write('event: ping\n');
    res.write(`data: {"time":"${new Date().toISOString()}"}\n\n`);
  }, 30000);
  
  // Send a message that this is a WebContainer version
  res.write('event: info\n');
  res.write('data: {"message":"WebContainer MCP server - basic functionality only"}\n\n');
  
  // Clean up on close
  req.on('close', () => {
    clearInterval(pingInterval);
  });
});

// SSE message endpoint (simplified, no MCP implementation)
app.post('/sse/messages', (req, res) => {
  res.json({
    jsonrpc: "2.0",
    id: req.body.id,
    result: {
      status: "ok",
      message: "WebContainer version - MCP not fully implemented"
    }
  });
});

// Set routes - WebSocket routes already set above
const setSocketRoutes = (wsApp) => {
  // This is intentionally empty as we already set up the WebSocket route
};

const setSseRoutes = (app) => {
  // This is intentionally empty as we already set up the SSE routes
};

const setHealthRoutes = (app) => {
  // This is intentionally empty as we already set up the health routes
};

// Simulate the route setup function calls for consistency with the original
setHealthRoutes(app);
setSseRoutes(app);
setSocketRoutes(wsApp);

// Start the server
const PORT = 4000;
app.listen(PORT, () => {
  console.log(`Server running at http://localhost:${PORT}`);
  console.log(`Environment: ${nodeEnv} (WebContainer)`);
});